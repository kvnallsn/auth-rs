var searchIndex = JSON.parse('{\
"auth_rs":{"doc":"FIDO2 WebAuthn implementation","i":[[0,"google","auth_rs","Validate a Google JWT received when using a Google Login",null,null],[3,"Jwk","auth_rs::google","A JSON Web Key, returned from Google and used to validate…",null,null],[12,"kid","","Key Id corresponding to this key",0,null],[12,"n","","The public key\'s modulus",0,null],[12,"e","","The public key\'s public exponent",0,null],[12,"kty","","The key\'s type (should be RSA)",0,null],[12,"typ","","The use case for this key (renamed due to Rust\'s keywords)…",0,null],[12,"alg","","The specific algorithm (should be RS256)",0,null],[3,"CacheControl","","Contains the cache control information from the key response",null,null],[12,"cacheability","","",1,null],[12,"max_age","","",1,null],[3,"MemoryCertStore","","A simple in-memory cert store",null,null],[3,"Profile","","",null,null],[12,"email","","User\'s Google email address",2,null],[12,"email_verified","","True if the user has verified their email address",2,null],[12,"name","","Name the user goes by (username)",2,null],[12,"picture","","Link to profile picture image",2,null],[12,"given_name","","Given (or first) name",2,null],[12,"family_name","","Family (or last) name",2,null],[12,"locale","","Locale",2,null],[3,"GoogleAuth","","",null,null],[4,"Cacheability","","",null,null],[13,"Public","","May be stored by any cache, even if the response is…",3,null],[13,"Private","","May be stored only by a browser\'s cache, even if the…",3,null],[13,"NoCache","","May be stored by any cache, even if the response is…",3,null],[13,"NoStore","","May not be stored in any cache. Although other directives…",3,null],[4,"GoogleError","","All errors that may occur from using this library",null,null],[13,"BadHeader","","Occurs when the header fails to decode or if the `typ`…",4,null],[13,"MissingKeyId","","Occurs when the header is missing the `kid` field",4,null],[13,"FetchKeysFailed","","Occurs when attempting the fetch the keys fails",4,null],[13,"KeyNotFound","","Occurs when was not found in either our cache or from Google",4,null],[13,"ValidationFailed","","Occurs if validating the JWT fails",4,null],[11,"new","","",1,[[],["cachecontrol",3]]],[11,"update","","",1,[[]]],[11,"new","","",5,[[],["memorycertstore",3]]],[8,"CertStore","","",null,null],[10,"update","","Handles updates from fetch",6,[[["jwk",3],["vec",3]]]],[10,"get","","Returns the key with the specified key id",6,[[],[["option",4],["decodingkey",3]]]],[11,"new","","",7,[[],["googleauth",3]]],[11,"verify","","Verifies a JWT token is valid",7,[[]]],[0,"password","auth_rs","Password based authentication using argon2",null,null],[4,"Variant","auth_rs::password","The Argon2 variant.",null,null],[13,"Argon2d","","Argon2 using data-dependent memory access to thwart…",8,null],[13,"Argon2i","","Argon2 using data-independent memory access to thwart…",8,null],[13,"Argon2id","","Argon2 using hybrid construction.",8,null],[4,"HasherError","","",null,null],[13,"ValidationFailed","","",9,null],[13,"Argon2","","",9,null],[4,"Hasher","","",null,null],[13,"Argon2","","",10,null],[11,"new","","",10,[[["variant",4]]]],[11,"hash","","",10,[[["asref",8]],[["hashererror",4],["result",4],["string",3]]]],[11,"verify","","",10,[[],[["result",4],["hashererror",4]]]],[11,"from","auth_rs::google","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","auth_rs::password","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",8,[[["variant",4]],[["option",4],["ordering",4]]]],[11,"eq","","",8,[[["variant",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"cmp","","",8,[[["variant",4]],["ordering",4]]],[11,"default","","",8,[[],["variant",4]]],[11,"clone","","",8,[[],["variant",4]]],[11,"update","auth_rs::google","Clears the old certificates and Reloads the them from Google",5,[[["jwk",3],["vec",3]]]],[11,"get","","Returns the key with the existing id, if one exists",5,[[],[["option",4],["decodingkey",3]]]],[11,"from","auth_rs::password","",9,[[["error",4]]]],[11,"clone","auth_rs::google","",0,[[],["jwk",3]]],[11,"clone","","",5,[[],["memorycertstore",3]]],[11,"clone","","",7,[[],["googleauth",3]]],[11,"default","","",1,[[],["cachecontrol",3]]],[11,"default","","",5,[[],["memorycertstore",3]]],[11,"default","auth_rs::password","",10,[[]]],[11,"fmt","auth_rs::google","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","auth_rs::password","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"source","","",9,[[],[["error",8],["option",4]]]],[11,"deserialize","auth_rs::google","",0,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"as_lowercase_str","auth_rs::password","Gets the lowercase string slice representation of the…",8,[[]]],[11,"as_u32","","Gets the u32 representation of the variant.",8,[[]]],[11,"as_u64","","Gets the u64 representation of the variant.",8,[[]]],[11,"as_uppercase_str","","Gets the uppercase string slice representation of the…",8,[[]]],[11,"from_str","","Attempts to create a variant from a string slice.",8,[[],[["variant",4],["error",4],["result",4]]]],[11,"from_u32","","Attempts to create a variant from an u32.",8,[[],[["variant",4],["error",4],["result",4]]]]],"p":[[3,"Jwk"],[3,"CacheControl"],[3,"Profile"],[4,"Cacheability"],[4,"GoogleError"],[3,"MemoryCertStore"],[8,"CertStore"],[3,"GoogleAuth"],[4,"Variant"],[4,"HasherError"],[4,"Hasher"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);